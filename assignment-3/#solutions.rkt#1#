#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 801 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #" "
0 0 15 3 15 #"define-datatype"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #" "
0 0 15 3 5 #"cases"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #" "
0 0 14 3 7 #"list-of"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #" "
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"eopl"
0 0 24 3 1 #" "
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"list-env.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"const-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"diff-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"zero?-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"predicate-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"true-res-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"false-res-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"var-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   (equal?-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   (less?-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   (greater?-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   (minus-exp"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;    (body-exp expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;   (add-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;   (mult-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;   (div-exp"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;    (exp1 expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;    (exp2 expression?))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"let-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"emptylist-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"cons-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"car-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"cdr-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"null?-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 8 #"program?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 9 #"const-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 8 #"diff-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 7 #"\"zero?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 9 #"zero?-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 5 #"\"let\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 7 #"let-exp"
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;; (define the-grammar"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;   '((program (expression) a-program)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;     (expression (identifier) var-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;;     (expression (number) const-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;;     ;;; (expression (\"-\" \"(\" expression \",\" expression \")"
 #"\") diff-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;     ;;; (expression (\"+\" \"(\" expression \",\" expression \")"
 #"\") add-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;;     ;;; (expression (\"*\" \"(\" expression \",\" expression \")"
 #"\") mult-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;     ;;; (expression (\"/\" \"(\" expression \",\" expression \")"
 #"\") div-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;     (expression (\"zero?\" \"(\" expression \")\") zero?-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;     ;;; (expression (\"equal?\" \"(\" expression \",\" expressio"
 #"n \")\") equal?-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;     ;;; (expression (\"less?\" \"(\" expression \",\" expression"
 #" \")\") less?-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;     ;;; (expression (\"greater?\" \"(\" expression \",\" express"
 #"ion \")\") greater?-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
(
 #";;;     ;;; (expression (\"minus\" \"(\" expression \")\") minus-exp"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";;;     (expression (\"if\" expression \"then\" expression \"else\" "
 #"expression) if-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;     (expression (\"let\" identifier \"=\" expression \"in\" expr"
 #"ession) let-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;     (expression (\"cons\" \"("
 #"\" expression \",\" expression \")\") cons-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 55
#";;;     (expression (\"car\" \"(\" expression \")\") car-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";;;     (expression (\"cdr\" \"(\" expression \")\") cdr-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;     (expression (\"emptylist\") emptylist-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;     (expression (\"null?\" \"(\" expression \")\") null?-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;;     (expression (\"list\" \"(\" (separated-list expression \",\""
 #") \")\" ) list-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;; (define report-expval-extractor-error"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   (\316\273 (name curr)"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";;;     (error 'expval \"Invalid value to extract, expected: ~s, got"
 #" ~s\" name curr)"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;   )"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;; )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;; ;; eopl"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;; (define expval->num"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;   (\316\273 (val)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;     (cases expval val"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;       (num-val (num) num)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;         (else (report-expval-extractor-error 'num val)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;; ;; eopl"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;; (define expval->bool"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;   (\316\273 (val)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;     (cases expval val"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;       (bool-val (bool) bool)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;       (else (report-expval-extractor-error 'bool val)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;; (define value-of"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   (\316\273 (exp env)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;     (cases expression exp"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;       (const-exp (num) "
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;         (num-val num))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;       (var-exp (var) "
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;         (apply-env env var))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;       (diff-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;         (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;               (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;           (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;;                 (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;             (num-val"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;             (- num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;       (add-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;               (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;                     (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;                 (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;                       (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;                   (num-val"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;                     (+ num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;       (mult-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;                 (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                       (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                   (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                         (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;                     (num-val"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;                     (* num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;       (div-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;               (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;                     (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;                 (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;                       (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;                   (num-val"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;                     (/ num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;       (zero?-exp (exp1)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                 (let ((val1 (value-of exp1 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                   (let ((num1 (expval->num val1)))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;                     (if (zero? num1)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;                         (bool-val #t)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;                         (bool-val #f)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;       (equal?-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                   (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;                         (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;                     (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;;                           (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;                       (bool-val"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;                       (= num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;       (less?-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;                 (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                       (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                   (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                         (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;                     (bool-val"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;                       (< num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;       (greater?-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;;                     (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;                           (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;                       (let ((num1 (expval->num val1))"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;                             (num2 (expval->num val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;;                         (bool-val"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;;                         (> num1 num2)))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;       (if-exp (exp1 exp2 exp3)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;               (let ((val1 (value-of exp1 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;                 (if (expval->bool val1)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;                     (value-of exp2 env)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;;                     (value-of exp3 env))))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;       (minus-exp (body-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;                 (let ((val1 (value-of body-exp env)))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                   (let ((num (expval->num val1)))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;;                     (num-val (- 0 num)))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;       (let-exp (var exp1 body)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;               (let ((val1 (value-of exp1 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;                 (value-of body"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;                           (extend-env var val1 env))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;       (emptylist-exp ()"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;                     (emptylist-val))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;       (cons-exp (exp1 exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;                 (let ((val1 (value-of exp1 env))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;                       (val2 (value-of exp2 env)))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;                   (pair-val val1 val2)))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;       (car-exp (body)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;               (expval-car (value-of body env)))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;       (cdr-exp (body)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;               (expval-cdr (value-of body env)))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;       (null?-exp (exp)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                 (expval-null? (value-of exp env)))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;       (list-exp (args)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;           (list-val (map (apply-elm env) args))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;; (define value-of-program "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;   (\316\273 (pgm)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;     (cases program pgm"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;       (a-program (exp1)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;;         (value-of exp1 (empty-env))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; (define run"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   (\316\273 (source)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;     (value-of-program (scan&parse source))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; (define list-prog \"let x = 4 "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;                    in cons(x,"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;;                             cons(cons(-(x, 1),"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;;                                        emptylist),"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;;                                  emptylist))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;                   \")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;; (displayln (run list-prog))"
0           0
